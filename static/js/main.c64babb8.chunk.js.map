{"version":3,"sources":["monero.png","bitcoinLogo.png","Dogecoin_logo.png","home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","state","circulation","price","marketCap","rank","reward","bitcoinInflation","dogeInflation","a","axios","get","result","blockInfo","lastReward","data","last_reward","toString","Number","toFixed","market_data","bitcoinResult","bitcoinBlockInfo","bitcoinLastReward","bitcoinData","circulating_supply","dogeResult","dogeData","this","setState","current_price","usd","market_cap","market_cap_rank","inflation","align","src","logo","height","width","id","replace","value","size","Button","variant","color","onClick","navigator","clipboard","writeText","href","bitcoinLogo","dogeLogo","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c64babb8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/monero.a8820da2.png\";","export default __webpack_public_path__ + \"static/media/bitcoinLogo.443a278f.png\";","export default __webpack_public_path__ + \"static/media/Dogecoin_logo.a33c493c.png\";","import React, { Component } from 'react'\nimport axios from 'axios'\nimport QRCode from \"react-qr-code\";\nimport logo from \"./monero.png\"\nimport bitcoinLogo from \"./bitcoinLogo.png\"\nimport dogeLogo from \"./Dogecoin_logo.png\"\nimport Button from '@material-ui/core/Button'\n\nexport class Home extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            circulation: 100000000,\n            price: 0,\n            marketCap: 0,\n            rank: 1,\n            reward: 3,\n            bitcoinInflation: 1,\n            dogeInflation: 1\n        }\n    }\n\n    async componentDidMount() {\n\n        //monero info\n        let result = await axios.get(\"https://api.coingecko.com/api/v3/coins/monero?tickers=true&market_data=true&community_data=true&developer_data=true&sparkline=true\")\n        let blockInfo = await axios.get(\"https://localmonero.co/blocks/api/get_stats\")\n\n        let lastReward = blockInfo.data.last_reward\n        lastReward = lastReward.toString()\n        //lastReward = lastReward[0] + '.' + lastReward.slice(1)\n        lastReward = '0.' + lastReward\n        lastReward = Number(lastReward)\n        lastReward *= 262800\n        lastReward = lastReward.toFixed(3)\n\n        let data = result.data.market_data\n\n        //bitcoin info\n        let bitcoinResult = await axios.get(\"https://api.coingecko.com/api/v3/coins/bitcoin?tickers=true&market_data=true&community_data=true&developer_data=true&sparkline=true\")\n        let bitcoinBlockInfo = await axios.get(\"https://blockchain.info/q/bcperblock\")\n\n        let bitcoinLastReward = bitcoinBlockInfo.data\n        bitcoinLastReward *= 52560\n        bitcoinLastReward = bitcoinLastReward.toFixed(2)\n\n        let bitcoinData = bitcoinResult.data.market_data\n\n        let bitcoinInflation = bitcoinLastReward / bitcoinData.circulating_supply\n        bitcoinInflation = 100 * bitcoinInflation\n\n        //doge info\n        let dogeResult = await axios.get(\"https://api.coingecko.com/api/v3/coins/dogecoin?tickers=true&market_data=true&community_data=true&developer_data=true&sparkline=true\")\n        let dogeData = dogeResult.data.market_data\n\n        let dogeInflation = dogeData.circulating_supply / 5000000000\n        dogeInflation = 100 / dogeInflation\n\n\n        this.setState({\n            circulation: data.circulating_supply,\n            price: data.current_price.usd,\n            marketCap: data.market_cap.usd,\n            rank: data.market_cap_rank,\n            reward: lastReward,\n            bitcoinInflation: bitcoinInflation,\n            dogeInflation: dogeInflation\n        })\n\n    }\n\n    render() {\n        let inflation = this.state.reward / this.state.circulation\n        inflation = 100 * inflation\n\n        return (\n            <div align=\"center\">\n                <div>\n                    <img src={logo} height=\"20%\" width=\"20%\" />\n                </div>\n                <div id=\"textInfo\">\n                    <h2>Price : ${this.state.price.toFixed(2)}</h2>\n                    <h2>Inflation Rate: {inflation.toFixed(2)}%</h2>\n                    <h2>\n                        Market Cap: ${this.state.marketCap\n                            .toFixed(2)\n                            .toString()\n                            .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                    </h2>\n                    <h2>market Cap Rank: {this.state.rank}</h2>\n                    <br />\n                    <div align=\"center\">\n                        <h2>Tips Appreciated :)</h2>\n                        <QRCode value=\"42wM142JiX12Bbn4QGLLFyGAYNJoMJxwALG3NvPzpzwG8tvE22uiCQqHf58EfmT6VoA6kwQoCPkXj63oC9CrD1bBFCy99Qu\" size=\"128\" />\n                        <br></br>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={() => navigator.clipboard.writeText('42wM142JiX12Bbn4QGLLFyGAYNJoMJxwALG3NvPzpzwG8tvE22uiCQqHf58EfmT6VoA6kwQoCPkXj63oC9CrD1bBFCy99Qu')}\n                        >\n                            Copy\n                        </Button>\n                    </div>\n                </div>\n                <br />\n                <br />\n                <br />\n                <br />\n                <h3>Other Coins</h3>\n                <div id=\"bitcoin\">\n                    <a href=\"https://veryscience.github.io/bitcoininflation/\" >\n                        <img src={bitcoinLogo} height=\"14%\" width=\"14%\" />\n                        <br />\n                        <p>Inflation: {this.state.bitcoinInflation.toFixed(2)}%</p>\n                    </a>\n                </div>\n                <br />\n                <div id=\"doge\">\n                    <a href=\"https://veryscience.github.io/dogeinflation/\" >\n                        <img src={dogeLogo} height=\"14%\" width=\"14%\" />\n                        <br />\n                        <p>Inflation: {this.state.dogeInflation.toFixed(2)}%</p>\n                    </a>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home\n","import './App.css';\nimport Home from './home.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}